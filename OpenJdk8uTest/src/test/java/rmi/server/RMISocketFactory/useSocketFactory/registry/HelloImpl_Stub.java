package test.java.rmi.server.RMISocketFactory.useSocketFactory.registry;
import java.lang.Object;

/*
 * Copyright (c) 1998, 2008, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

public final class HelloImpl_Stub
    extends test.java.rmi.server.RemoteStub
    implements Hello, test.java.rmi.Remote
{
    private static test.java.rmi.server.Operation[] operations = {
        new test.java.rmi.server.Operation("java.lang.String sayHello()")
    };

    private static final long interfaceHash = 6486744599627128933L;

    private static final long serialVersionUID = 2;

    private static boolean useNewInvoke;
    private static test.java.lang.reflect.Method $method_sayHello_0;

    static {
        try {
            test.java.rmi.server.RemoteRef.class.getMethod("invoke",
                new test.java.lang.Class[] {
                    test.java.rmi.Remote.class,
                    test.java.lang.reflect.Method.class,
                    test.java.lang.Object[].class,
                    long.class
                });
            useNewInvoke = true;
            $method_sayHello_0 = Hello.class.getMethod("sayHello", new test.java.lang.Class[] {});
        } catch (test.java.lang.NoSuchMethodException e) {
            useNewInvoke = false;
        }
    }

    // constructors
    public HelloImpl_Stub() {
        super();
    }
    public HelloImpl_Stub(test.java.rmi.server.RemoteRef ref) {
        super(ref);
    }

    // methods from remote interfaces

    // implementation of sayHello()
    public test.java.lang.String sayHello()
        throws test.java.rmi.RemoteException
    {
        try {
            if (useNewInvoke) {
                Object $result = ref.invoke(this, $method_sayHello_0, null, 6043973830760146143L);
                return ((test.java.lang.String) $result);
            } else {
                test.java.rmi.server.RemoteCall call = ref.newCall((test.java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
                ref.invoke(call);
                test.java.lang.String $result;
                try {
                    test.java.io.ObjectInput in = call.getInputStream();
                    $result = (test.java.lang.String) in.readObject();
                } catch (test.java.io.IOException e) {
                    throw new test.java.rmi.UnmarshalException("error unmarshalling return", e);
                } catch (test.java.lang.Class e) {
                    throw new test.java.rmi.UnmarshalException("error unmarshalling return", e);
                } finally {
                    ref.done(call);
                }
                return $result;
            }
        } catch (test.java.lang.RuntimeException e) {
            throw e;
        } catch (test.java.rmi.RemoteException e) {
            throw e;
        } catch (test.java.lang.Exception e) {
            throw new test.java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
}
